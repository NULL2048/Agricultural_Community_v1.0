# 这里就是用来设置tomcat服务器的相关配置，第一个是设置服务器端口
# 第二个是设置虚拟项目名，如果不设置虚拟项目名，spring boot项目可以不用在地址栏不输入虚拟项目名就能访问项目，但是如果设置了虚拟项目名，就必须得输入虚拟项目名才能访问项目
# ServerProperties
server.port=8080
server.servlet.context-path=/ac

# 关掉缓存，这个操作就是给一个配置类注入数据，详细看java笔记的Properties类
# ThymeleafProperties
spring.thymeleaf.cache=false

# 因为导入的mybatis的包是spring boot整合的，所以不用再去创建XML配置文件去配置它了，直接在这里配置一些关键的内容，spring boot会自动进行配置的
# DataSourceProperties  这个配置的是数据库
# 这个是配置数据库 注意这里对数据库的所有配置，等号右边的内容除了要写的，其他不能多加任何东西，比如在最后有一个空格，就会导致数据库加载失败，所以一定要留心
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/community?characterEncoding=utf-8&useSSL=false&serverTimezone=Hongkong&serverTimezone=GMT&useUnicode=true
spring.datasource.username=root
spring.datasource.password=123456
# 这个是连接池的类型，spring boot有很多连接池类型，这个是性能最好的
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
# 这个是配置连接池最大连接数
spring.datasource.hikari.maximum-pool-size=15
# 设置最小空闲连接
spring.datasource.hikari.minimum-idle=5
# 设置超时时间
spring.datasource.hikari.idle-timeout=30000

# MybatisProperties  这个配置的是mybatis数据库连接池
# 映射配置文件的位置 这个classpath就是指的target中classes文件夹路径，所以要在resources文件夹中创建一个mapper文件夹用来存放xml，因为resource里面的东西最终会被编译到classes文件夹当中
mybatis.mapper-locations=classpath:mapper/*.xml
# 设置用来存放实体类的包名
mybatis.type-aliases-package=team.se.acommunity.entity
# 这个是启动自动生成组件  就比如说创建账号的时候本来是没有id的，id时自动创建的，启动了这个自动生成组件之后，插入之后会自动生成id，并且会将生成的id赋值给model属性
mybatis.configuration.useGeneratedKeys=true
# 本身sql中的字段是不区分大小写的，但是Java中的属性名应该使用驼峰命名发，开启了这个，他就会自动将Java类中的驼峰命名属性和数据库中的全部小写的属性匹配起来
mybatis.configuration.mapUnderscoreToCamelCase=true

# logger   但是我们直接用logback-spring.xml进行日志配置是最方便的，所以就不在这里配置了
# 配置日志级别
# logging.level.team.se.acommunity=warn
# 配置日志输出位置
# logging.file=c:/Users/97307/Desktop/acommunity.log

# MailProperties
spring.mail.host=smtp.qq.com
# 一般邮箱的smtp端口号都是465
# spring.main.port=465
spring.mail.username=973071263@qq.com
spring.mail.password=dlwjukkwvuagbbdc
# 设置所使用协议
# spring.mail.protocol=smtps
# 下面这个表示来发送邮件的时候使用ssl安全连接协议
# spring.mail.properties.mail.smtp.ssl.enable=true
spring.mail.properties.mail.smtl.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true

# community  设置项目域名
community.path.domain=http://localhost:8080
# 上传文件的存放路径
community.path.upload=C:/Users/97307/Desktop/upload

# RedisProperties 下面这三个是必须要配置的属性，还有很多其他属性可以配置，但是非必须，这个项目可以直接用他们的默认值
# redis内置0-15 共16个库，这里是指定要使用那个数据库
spring.redis.database=11
# 设置本机地址
spring.redis.host=localhost
# 配置redis端口
spring.redis.port=6379

# KafkaProperties   要配置这个类
# 配置servers路径，也就是kafka安装时候设置的端口
spring.kafka.bootstrap-servers=localhost:9092
# 设置消费者的分组Id  就是说当前这个消费者分到了指定主题的哪一个分组  下面填入的id必须是在consumer.properties这个配置文件中已经配置添加的
spring.kafka.consumer.group-id=community-consumer-group
# 设置是否自动提交消费者的偏移量   消费者在读取了偏移量之后会记录下来，然后去做提交
spring.kafka.consumer.enable-auto-commit=true
# 设置自动提交的频率 多久自动提交一次 单位毫秒
spring.kafka.consumer.auto-commit-interval=3000

# ElasticsearchProperties   想要用java访问es服务器就需要配置这个类
# 设置集群的名字，在es配置文件里面也有设置，必须要这边设置的名字在es配置文件中的名字一致才可以
spring.data.elasticsearch.cluster-name=acommunity
# 配置节点 咱们这个项目只有本机这一个节点。es一般有两个端口，一个9200，一个9300，9200是http端口，9300是TCP端口，一般在整合在java中时就用9300端口
spring.data.elasticsearch.cluster-nodes=127.0.0.1:9300
# 要注意es和redis都是基于netty的，所以他们两个之间是有冲突的，需要解决一下,解决方案在spring启动类中

# TaskExcutionProperties 配置spring提供的普通线程池
# 线程池的核心线程数量是5
spring.task.execution.pool.core-size=5
# 线程池的最大线程数是15，就是说在创建线程池的时候就给线程池创建好5个线程，这个线程池最少就是5个线程，但是当使用线程池比较多的时候，5个不够用了，他也会自动扩容，这里设置最大就将线程池扩容到15个线程
spring.task.execution.pool.max-size=15
# 设置线程池等待队列的长度，就是说当线程池已经被加到15个线程数量但是还是不够的时候，就将想要使用线程池的任务先放到等待队列中等待，这个等待队列设置为100长度
spring.task.execution.pool.queue-capacity=100

# TaskSchedulingProperties  配置spring定时执行线程池
# 这个只用这一个配置就行了，因为这种线程池是被动执行，在执行先就已经知道要执行哪些任务了，根据要执行的任务书去设置线程池大小就可以，不需要再动态扩充线程池了
spring.task.scheduling.pool.size=5

# QuartzProperties  quartz线程池的配置类  Quartz底层也是通过线程池来实现的，spring boot对这个线程池有默认配置，所以不在这类配置也可以，如果想自己配置，就在这里配置线程池相关信息，会覆盖spring boot的默认配置
# 但是如果想使用分布式，就得将任务的配置信息存到数据库中，就必须来配置这些，因为spring boot默认配置是从内存中读取任务配置信息
# 在从数据库中读取信息的时候是通过jdbc来实现的
spring.quartz.job-store-type=jdbc
# 调度任务的调度器的名字
spring.quartz.scheduler-name=communityScheduler
# 调度器的id是自动生成的
spring.quartz.properties.org.quartz.scheduler.instanceId=AUTO
# 将任务存到数据库中是通过org.quartz.impl.jdbcjobstore.JobStoreTX实现的
spring.quartz.properties.org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
# 设置jdbc的驱动
spring.quartz.properties.org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
# 是都采用集群的方式
spring.quartz.properties.org.quartz.jobStore.isClustered=true
# 使用哪个线程池 org.quartz.simpl.SimpleThreadPool这个是quartz底层的线程池类
spring.quartz.properties.org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
# 配置线程池的线程数量
spring.quartz.properties.org.quartz.threadPool.threadCount=5

# wk   下面这些Key都是自己定义的  方便以后迁移服务器修改路径信息
# 执行命令的路径
wk.image.command=c:/Program Files/wkhtmltopdf/bin/wkhtmltoimage
# 图片存放路径
wk.image.storage=c:/Users/97307/Desktop/wk-images

# aliyun   要学会下面这些命名key的思路，很受用
# 配置阿里云的access Key 这个是表示对服务器有管理权的用户，只有拥有这个密钥，才能向数据库中上传文件
aliyun.key.access=LTAI4Fv3hoH1iLTT2zQ2em5H
# 配置用来对文件加密的密钥
aliyun.key.secret=GpU9U3IVaT7SZXimMXotayqmfcp7g3
# 配置头像的存储空间名
aliyun.bucket.header.name=acommunity-header
# 配置头像的存储空间的访问路径
aliyun.bucket.header.url=https://acommunity-header.oss-cn-beijing.aliyuncs.com
# 配置分享文件的存储空间名
aliyun.bucket.share.name=acommunity-share
# 配置分享文件的存储空间的访问路径
aliyun.bucket.share.url=https://acommunity-share.oss-cn-beijing.aliyuncs.com

# caffeine  这个并不是强制要配置的，而是自定义的，因为以后如果换了性能更好的服务器，可以更改参数来扩大内存空间，所以这里配置一下方便以后的升级
# 这里设置的是存放帖子数据的缓存中最大可以存放15个对象，这里15个就够了，因为热门帖子不用有人一下去看几十页的，可能就看前几页，这里只缓存经常访问的几页数据就可以了
caffeine.posts.max-size=15
# 设置缓存失效时间  180秒
caffeine.posts.expire-seconds=180

# actuator   配置端点
# 设置要暴露那些端点 *表示所有断电都暴露
management.endpoints.web.exposure.include=*
# 下面配置哪些端点不要暴露，所以上面的全暴露了，这里又设置了不暴露，就相当于除了下面两个端点，开启的端点全部暴露
management.endpoints.web.exposure.exclude=info,caches


